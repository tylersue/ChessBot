import cv2
import numpy as np
import pyautogui
import chess
import chess.engine
import time
import tkinter as tk
from PIL import Image, ImageTk
import os


# Configuration:

# Coordinates of the chess board on screen (x, y, width, height)
# (You must calibrate these values for your display)
BOARD_REGION = (200, 224, 584, 583)

# Your side: if you're playing white, leave as "white"; if black, set "black"
USER_COLOR = "white"

# Path to Stockfish engine binary
STOCKFISH_PATH = "/Applications/Stockfish.app/Contents/MacOS/Stockfish"

# Directory containing your piece templates (e.g., templates/wP.png, templates/bK.png, etc.)
TEMPLATE_DIR = "templates"

# Threshold for template matching (tune as necessary)
MATCH_THRESHOLD = 0.8

# Mapping from template filenames to chess piece notation
TEMPLATE_MAPPING = {
    "wP_white.png": "P",
    "wP_green.png": "P",
    "wN_white.png": "N",
    "wN_green.png": "N",
    "wB_white.png": "B",
    "wB_green.png": "B",
    "wR_white.png": "R",
    "wR_green.png": "R",
    "wQ_white.png": "Q",
    "wQ_green.png": "Q",
    "wK_white.png": "K",
    "wK_green.png": "K",
    "bP_white.png": "p",
    "bP_green.png": "p",
    "bN_white.png": "n",
    "bN_green.png": "n",
    "bB_white.png": "b",
    "bB_green.png": "b",
    "bR_white.png": "r",
    "bR_green.png": "r",
    "bQ_white.png": "q",
    "bQ_green.png": "q",
    "bK_white.png": "k",
    "bK_green.png": "k",
}


# -------------------------------
# Helper Functions
# -------------------------------

def load_templates():
    """
    Load template images for piece recognition.
    Expects files in TEMPLATE_DIR matching names in TEMPLATE_MAPPING.
    """
    templates = {}
    for filename, piece in TEMPLATE_MAPPING.items():
        path = os.path.join(TEMPLATE_DIR, filename)
        if os.path.exists(path):
            img = cv2.imread(path, 0)  # load in grayscale
            templates[piece] = img
        else:
            print(f"Template not found: {path}")
    return templates

def capture_board_image():
    """
    Capture a screenshot of the board region.
    """
    screenshot = pyautogui.screenshot(region=BOARD_REGION)
    # Convert PIL image to OpenCV format (BGR)
    img = cv2.cvtColor(np.array(screenshot), cv2.COLOR_RGB2BGR)
    return img

def split_into_squares(board_img):
    """
    Divide the board image into an 8x8 grid of square images.
    """
    squares = []
    h, w, _ = board_img.shape
    square_size = w // 8  # assumes board is square
    for row in range(8):
        row_squares = []
        for col in range(8):
            x = col * square_size
            y = row * square_size
            square_img = board_img[y:y+square_size, x:x+square_size]
            row_squares.append(square_img)
        squares.append(row_squares)
    return squares

def detect_piece(square_img, templates):
    """
    Use template matching to detect which piece (if any) is in a given square.
    Returns the piece notation (e.g., "P", "k") or None if empty.
    """
    gray = cv2.cvtColor(square_img, cv2.COLOR_BGR2GRAY)
    best_val = 0
    best_piece = None
    for piece, template in templates.items():
        # Perform template matching
        res = cv2.matchTemplate(gray, template, cv2.TM_CCOEFF_NORMED)
        _, max_val, _, _ = cv2.minMaxLoc(res)
        if max_val > best_val and max_val >= MATCH_THRESHOLD:
            best_val = max_val
            best_piece = piece
    return best_piece

def detect_board_state(board_img, templates):
    """
    Process the board image to determine the placement of pieces.
    Returns an 8x8 list with piece notations or empty strings.
    """
    board_state = []
    squares = split_into_squares(board_img)
    for row in squares:
        board_row = []
        for square in row:
            piece = detect_piece(square, templates)
            board_row.append(piece if piece is not None else "")
        board_state.append(board_row)
    return board_state

def board_state_to_fen(board_state, user_color):
    """
    Convert the detected board state into a FEN string.
    Assumes board_state is ordered top-to-bottom (row 0 is top, row 7 is bottom).
    If playing black, you might need to rotate the board.
    """
    # If you're playing black (with the board rotated), flip the board state:
    if user_color.lower() == "black":
        board_state = board_state[::-1]
        board_state = [row[::-1] for row in board_state]

    fen_rows = []
    for row in board_state:
        fen_row = ""
        empty_count = 0
        for cell in row:
            if cell == "":
                empty_count += 1
            else:
                if empty_count > 0:
                    fen_row += str(empty_count)
                    empty_count = 0
                fen_row += cell
        if empty_count > 0:
            fen_row += str(empty_count)
        fen_rows.append(fen_row)
    fen = "/".join(fen_rows)
    # Append default FEN fields (assumes white to move, no castling rights, etc.)
    full_fen = fen + " w - - 0 1"
    return full_fen

def analyze_board(fen, engine, style="safe"):
    """
    Analyze the board with Stockfish.
    Uses multipv mode to get multiple candidate moves.
    The 'style' parameter (safe, aggressive, tricky) is a rudimentary heuristic:
      - "safe": use the best move.
      - "aggressive": pick the second-best move if available.
      - "tricky": pick the third-best move if available.
    Returns a tuple: (suggested_move, best_move, full_analysis_info).
    """
    board = chess.Board(fen)
    # Analyze with a short time limit and multiPV=3 for candidate moves.
    info = engine.analyse(board, chess.engine.Limit(time=0.1), multipv=3)
    best_move = info[0]['pv'][0]
    if style == "aggressive" and len(info) > 1:
        move = info[1]['pv'][0]
    elif style == "tricky" and len(info) > 2:
        move = info[2]['pv'][0]
    else:
        move = best_move
    return move, best_move, info

# -------------------------------
# Overlay Window using Tkinter
# -------------------------------

class Overlay(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Chess Bot Coach")
        self.geometry("300x150")
        self.attributes("-topmost", True)
        self.label = tk.Label(self, text="Initializing...", font=("Arial", 12), justify="left")
        self.label.pack(pady=20, padx=10)
        self.after(1000, self.periodic_update)

    def update_text(self, text):
        self.label.config(text=text)
        self.update_idletasks()

    def periodic_update(self):
        # Placeholder for periodic actions if needed
        self.after(1000, self.periodic_update)

# -------------------------------
# Main Loop
# -------------------------------

def main():
    templates = load_templates()
    if not templates:
        print("No templates loaded. Check your TEMPLATE_DIR and files.")
        return

    try:
        engine = chess.engine.SimpleEngine.popen_uci(STOCKFISH_PATH)
    except Exception as e:
        print(f"Error launching Stockfish: {e}")
        return

    # Create the overlay window
    overlay = Overlay()

    # Set your preferred play style: "safe", "aggressive", or "tricky"
    style = "safe"

    try:
        while True:
            board_img = capture_board_image()
            board_state = detect_board_state(board_img, templates)
            fen = board_state_to_fen(board_state, USER_COLOR)
            print("Detected FEN:", fen)
            try:
                suggested_move, best_move, analysis_info = analyze_board(fen, engine, style)
                # Build a suggestion message
                suggestion_text = (
                    f"Suggested Move: {suggested_move}\n"
                    f"Best Move: {best_move}\n"
                    "Analysis:\n"
                )
                # Optionally, list candidate moves and evaluations:
                for i, info in enumerate(analysis_info):
                    move = info['pv'][0]
                    score = info['score'].pov(chess.WHITE)
                    suggestion_text += f"{i+1}. {move} ({score})\n"
            except Exception as e:
                suggestion_text = f"Error analyzing board:\n{e}"
            overlay.update_text(suggestion_text)
            time.sleep(1)  # Update interval (in seconds)
            overlay.update()  # Process Tkinter events
    except KeyboardInterrupt:
        print("Exiting...")
    finally:
        engine.quit()
        overlay.destroy()

if __name__ == "__main__":
    main()
